import { supabase } from './supabase';

export interface PatientSummaryResponse {
  summary: string;
  metadata: {
    patientId: string;
    timeframe: number;
    generatedAt: string;
    dataPoints: {
      tasks: number;
      symptomLogs: number;
      assessments: number;
    };
  };
}

export interface PatientSummaryError {
  error: string;
}

export class LLMService {
  private static getEdgeFunctionUrl(): string {
    // Get the Supabase URL from the environment or use the configured URL
    const supabaseUrl = 'https://kwjxtgddzjgxlnkaerdz.supabase.co';
    return `${supabaseUrl}/functions/v1/summarize-patient-data`;
  }

  /**
   * Generate an AI-powered summary of patient data
   * @param patientId - The ID of the patient to summarize
   * @param timeframe - Number of days to include in the summary (default: 30)
   * @param authToken - Authentication token for the request
   * @returns Promise containing the patient summary or throws an error
   */
  static async getPatientSummary(
    patientId: string,
    timeframe: number = 30,
    authToken: string
  ): Promise<string> {
    try {
      console.log('üîç [DEBUG] LLMService.getPatientSummary called:', {
        patientId,
        timeframe,
        hasAuthToken: !!authToken,
      });

      if (!patientId) {
        throw new Error('Patient ID is required');
      }

      if (!authToken) {
        throw new Error('Authentication token is required');
      }

      const url = this.getEdgeFunctionUrl();
      console.log('üîç [DEBUG] Edge function URL:', url);

      const requestBody = {
        patientId,
        timeframe,
      };

      console.log('üîç [DEBUG] Request body:', requestBody);

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${authToken}`,
          'Content-Type': 'application/json',
          'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3anh0Z2RkempneGxua2FlcmR6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA3NDI2OTAsImV4cCI6MjA2NjMxODY5MH0.UyHfFH3GIn0DxVOIecnQiHC8wKTT5jVe0tVb2wNdwZk',
        },
        body: JSON.stringify(requestBody),
      });

      console.log('üîç [DEBUG] Response status:', response.status);
      console.log('üîç [DEBUG] Response headers:', Object.fromEntries(response.headers.entries()));

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå [ERROR] Edge function response error:', {
          status: response.status,
          statusText: response.statusText,
          errorText,
        });

        // Try to parse error as JSON, fallback to text
        let errorMessage = 'Failed to generate patient summary';
        try {
          const errorData = JSON.parse(errorText) as PatientSummaryError;
          errorMessage = errorData.error || errorMessage;
        } catch {
          errorMessage = errorText || errorMessage;
        }

        throw new Error(`${errorMessage} (Status: ${response.status})`);
      }

      const responseText = await response.text();
      console.log('üîç [DEBUG] Raw response text:', responseText.substring(0, 200) + '...');

      let data: PatientSummaryResponse;
      try {
        data = JSON.parse(responseText);
      } catch (parseError) {
        console.error('‚ùå [ERROR] Failed to parse response JSON:', parseError);
        throw new Error('Invalid response format from summary service');
      }

      if (!data.summary) {
        console.error('‚ùå [ERROR] No summary in response:', data);
        throw new Error('No summary generated by the service');
      }

      console.log('‚úÖ [SUCCESS] Patient summary generated successfully:', {
        summaryLength: data.summary.length,
        dataPoints: data.metadata?.dataPoints,
        generatedAt: data.metadata?.generatedAt,
      });

      return data.summary;
    } catch (error) {
      console.error('‚ùå [ERROR] LLMService.getPatientSummary exception:', error);
      
      // Re-throw with more context if it's a generic error
      if (error instanceof Error) {
        if (error.message.includes('fetch')) {
          throw new Error('Network error: Unable to connect to summary service. Please check your internet connection.');
        }
        throw error;
      }
      
      throw new Error('Unexpected error occurred while generating patient summary');
    }
  }

  /**
   * Get the current user's authentication token
   * @returns Promise containing the auth token or throws an error
   */
  static async getCurrentAuthToken(): Promise<string> {
    try {
      console.log('üîç [DEBUG] Getting current auth token...');
      
      const { data: { session }, error } = await supabase.auth.getSession();
      
      if (error) {
        console.error('‚ùå [ERROR] Auth session error:', error);
        throw new Error('Failed to get authentication session');
      }
      
      if (!session?.access_token) {
        console.error('‚ùå [ERROR] No access token in session');
        throw new Error('No valid authentication session found');
      }
      
      console.log('‚úÖ [SUCCESS] Auth token retrieved successfully');
      return session.access_token;
    } catch (error) {
      console.error('‚ùå [ERROR] getCurrentAuthToken exception:', error);
      throw error;
    }
  }

  /**
   * Validate that the current user has provider role and access to the patient
   * @param patientId - The ID of the patient to validate access for
   * @returns Promise that resolves if access is valid, throws error otherwise
   */
  static async validateProviderAccess(patientId: string): Promise<void> {
    try {
      console.log('üîç [DEBUG] Validating provider access for patient:', patientId);
      
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (userError || !user) {
        throw new Error('User not authenticated');
      }

      // Check if current user is a provider
      const { data: userProfile, error: profileError } = await supabase
        .from('users')
        .select('role')
        .eq('id', user.id)
        .single();

      if (profileError || userProfile?.role !== 'provider') {
        throw new Error('Access denied. Provider role required.');
      }

      // Check if care relationship exists
      const { data: careRelationship, error: relationshipError } = await supabase
        .from('care_relationships')
        .select('id')
        .eq('provider_id', user.id)
        .eq('patient_id', patientId)
        .single();

      if (relationshipError || !careRelationship) {
        throw new Error('Access denied. No care relationship found with this patient.');
      }

      console.log('‚úÖ [SUCCESS] Provider access validated');
    } catch (error) {
      console.error('‚ùå [ERROR] validateProviderAccess exception:', error);
      throw error;
    }
  }

  /**
   * Generate patient summary with built-in validation and error handling
   * @param patientId - The ID of the patient to summarize
   * @param timeframe - Number of days to include in the summary (default: 30)
   * @returns Promise containing the patient summary
   */
  static async generatePatientSummary(
    patientId: string,
    timeframe: number = 30
  ): Promise<string> {
    try {
      console.log('üîç [DEBUG] generatePatientSummary called:', { patientId, timeframe });

      // Validate provider access first
      await this.validateProviderAccess(patientId);

      // Get authentication token
      const authToken = await this.getCurrentAuthToken();

      // Generate the summary
      const summary = await this.getPatientSummary(patientId, timeframe, authToken);

      return summary;
    } catch (error) {
      console.error('‚ùå [ERROR] generatePatientSummary exception:', error);
      throw error;
    }
  }
}